// -*- C++ -*-
// $Id$

/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.1.2
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.cs.wustl.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// .\be\be_codegen.cpp:376


#include "Tao_Publisher_ServiceC.h"
#include "tao/CDR.h"
#include "tao/Exception_Data.h"
#include "tao/Invocation_Adapter.h"
#include "tao/Object_T.h"
#include "tao/ORB_Core.h"
#include "ace/OS_NS_string.h"

#if !defined (__ACE_INLINE__)
#include "Tao_Publisher_ServiceC.inl"
#endif /* !defined INLINE */

// TAO_IDL - Generated from
// .\be\be_visitor_sequence\sequence_cs.cpp:73

#if !defined (_OASIS_SOFTWAREPROBEDATA_CS_)
#define _OASIS_SOFTWAREPROBEDATA_CS_

OASIS::SoftwareProbeData::SoftwareProbeData (void)
{}

OASIS::SoftwareProbeData::SoftwareProbeData (
    ::CORBA::ULong max)
  : ::TAO::unbounded_value_sequence<
        ::CORBA::Octet
      > (max)
{}

OASIS::SoftwareProbeData::SoftwareProbeData (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    ::CORBA::Octet * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::unbounded_value_sequence<
        ::CORBA::Octet
      >
    (max, length, buffer, release)
{}

OASIS::SoftwareProbeData::SoftwareProbeData (
    const SoftwareProbeData &seq)
  : ::TAO::unbounded_value_sequence<
        ::CORBA::Octet
      > (seq)
{}

OASIS::SoftwareProbeData::~SoftwareProbeData (void)
{}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// .\be\be_visitor_interface\interface_cs.cpp:51

// Traits specializations for OASIS::DataSubscriber.

OASIS::DataSubscriber_ptr
TAO::Objref_Traits<OASIS::DataSubscriber>::duplicate (
    OASIS::DataSubscriber_ptr p)
{
  return OASIS::DataSubscriber::_duplicate (p);
}

void
TAO::Objref_Traits<OASIS::DataSubscriber>::release (
    OASIS::DataSubscriber_ptr p)
{
  ::CORBA::release (p);
}

OASIS::DataSubscriber_ptr
TAO::Objref_Traits<OASIS::DataSubscriber>::nil (void)
{
  return OASIS::DataSubscriber::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<OASIS::DataSubscriber>::marshal (
    const OASIS::DataSubscriber_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// TAO_IDL - Generated from
// .\be\be_visitor_operation\operation_cs.cpp:91

char *
OASIS::DataSubscriber::name (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< char *>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "_get_name",
      9,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// .\be\be_visitor_operation\operation_cs.cpp:91

void
OASIS::DataSubscriber::handle_data (
  const ::OASIS::SubscriberDataPacket & packet)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::OASIS::SubscriberDataPacket>::in_arg_val _tao_packet (packet);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_packet
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "handle_data",
      11,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
    );

  _tao_call.invoke (0, 0);
}

OASIS::DataSubscriber::DataSubscriber (void)
{
}

OASIS::DataSubscriber::~DataSubscriber (void)
{
}

OASIS::DataSubscriber_ptr
OASIS::DataSubscriber::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<DataSubscriber>::narrow (
        _tao_objref,
        "IDL:OASIS/DataSubscriber:1.0");
}

OASIS::DataSubscriber_ptr
OASIS::DataSubscriber::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<DataSubscriber>::unchecked_narrow (
        _tao_objref);
}

OASIS::DataSubscriber_ptr
OASIS::DataSubscriber::_nil (void)
{
  return 0;
}

OASIS::DataSubscriber_ptr
OASIS::DataSubscriber::_duplicate (DataSubscriber_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
OASIS::DataSubscriber::_tao_release (DataSubscriber_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
OASIS::DataSubscriber::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:OASIS/DataSubscriber:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* OASIS::DataSubscriber::_interface_repository_id (void) const
{
  return "IDL:OASIS/DataSubscriber:1.0";
}

::CORBA::Boolean
OASIS::DataSubscriber::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// .\be\be_visitor_interface\interface_cs.cpp:51

// Traits specializations for OASIS::PublisherService.

OASIS::PublisherService_ptr
TAO::Objref_Traits<OASIS::PublisherService>::duplicate (
    OASIS::PublisherService_ptr p)
{
  return OASIS::PublisherService::_duplicate (p);
}

void
TAO::Objref_Traits<OASIS::PublisherService>::release (
    OASIS::PublisherService_ptr p)
{
  ::CORBA::release (p);
}

OASIS::PublisherService_ptr
TAO::Objref_Traits<OASIS::PublisherService>::nil (void)
{
  return OASIS::PublisherService::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<OASIS::PublisherService>::marshal (
    const OASIS::PublisherService_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// TAO_IDL - Generated from
// .\be\be_visitor_operation\operation_cs.cpp:91

void
OASIS::PublisherService::register_subscriber (
  const ::OASIS::UUID & probe_uuid,
  ::OASIS::DataSubscriber_ptr subscriber)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::OASIS::UUID>::in_arg_val _tao_probe_uuid (probe_uuid);
  TAO::Arg_Traits< ::OASIS::DataSubscriber>::in_arg_val _tao_subscriber (subscriber);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_probe_uuid,
      &_tao_subscriber
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      3,
      "register_subscriber",
      19,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
    );

  _tao_call.invoke (0, 0);
}

// TAO_IDL - Generated from
// .\be\be_visitor_operation\operation_cs.cpp:91

void
OASIS::PublisherService::unregister_subscriber (
  const ::OASIS::UUID & probe_uuid,
  ::OASIS::DataSubscriber_ptr subscriber)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::OASIS::UUID>::in_arg_val _tao_probe_uuid (probe_uuid);
  TAO::Arg_Traits< ::OASIS::DataSubscriber>::in_arg_val _tao_subscriber (subscriber);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_probe_uuid,
      &_tao_subscriber
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      3,
      "unregister_subscriber",
      21,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
    );

  _tao_call.invoke (0, 0);
}

OASIS::PublisherService::PublisherService (void)
{
}

OASIS::PublisherService::~PublisherService (void)
{
}

OASIS::PublisherService_ptr
OASIS::PublisherService::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<PublisherService>::narrow (
        _tao_objref,
        "IDL:OASIS/PublisherService:1.0");
}

OASIS::PublisherService_ptr
OASIS::PublisherService::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<PublisherService>::unchecked_narrow (
        _tao_objref);
}

OASIS::PublisherService_ptr
OASIS::PublisherService::_nil (void)
{
  return 0;
}

OASIS::PublisherService_ptr
OASIS::PublisherService::_duplicate (PublisherService_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
OASIS::PublisherService::_tao_release (PublisherService_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
OASIS::PublisherService::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:OASIS/RemoteService:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:OASIS/PublisherService:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* OASIS::PublisherService::_interface_repository_id (void) const
{
  return "IDL:OASIS/PublisherService:1.0";
}

::CORBA::Boolean
OASIS::PublisherService::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// .\be\be_visitor_sequence\cdr_op_cs.cpp:96
#if !defined _TAO_CDR_OP_OASIS_SoftwareProbeData_CPP_
#define _TAO_CDR_OP_OASIS_SoftwareProbeData_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const OASIS::SoftwareProbeData &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    OASIS::SoftwareProbeData &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_OASIS_SoftwareProbeData_CPP_ */

// TAO_IDL - Generated from
// .\be\be_visitor_structure\cdr_op_cs.cpp:52

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const OASIS::SubscriberDataPacket &_tao_aggregate)
{
  return
    (strm << ::ACE_OutputCDR::from_boolean (_tao_aggregate.byte_order)) &&
    (strm << _tao_aggregate.einode) &&
    (strm << _tao_aggregate.data);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    OASIS::SubscriberDataPacket &_tao_aggregate)
{
  return
    (strm >> ::ACE_InputCDR::to_boolean (_tao_aggregate.byte_order)) &&
    (strm >> _tao_aggregate.einode) &&
    (strm >> _tao_aggregate.data);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// .\be\be_visitor_interface\cdr_op_cs.cpp:54

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const OASIS::DataSubscriber_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    OASIS::DataSubscriber_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::OASIS::DataSubscriber RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (obj.in ());
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// .\be\be_visitor_interface\cdr_op_cs.cpp:54

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const OASIS::PublisherService_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    OASIS::PublisherService_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::OASIS::PublisherService RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (obj.in ());
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



