// -*- C++ -*-
// $Id$

/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.1.2
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.cs.wustl.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// .\be\be_codegen.cpp:376


#include "DataAcquisitionControllerC.h"
#include "tao/CDR.h"
#include "tao/Exception_Data.h"
#include "tao/Invocation_Adapter.h"
#include "tao/Object_T.h"
#include "tao/SystemException.h"
#include "ace/OS_NS_string.h"

#if !defined (__ACE_INLINE__)
#include "DataAcquisitionControllerC.inl"
#endif /* !defined INLINE */

// TAO_IDL - Generated from
// .\be\be_visitor_sequence\sequence_cs.cpp:73

#if !defined (_OASIS_REMOTESERVICELIST_CS_)
#define _OASIS_REMOTESERVICELIST_CS_

OASIS::RemoteServiceList::RemoteServiceList (void)
{}

OASIS::RemoteServiceList::RemoteServiceList (
    ::CORBA::ULong max)
  : ::TAO::unbounded_object_reference_sequence<
        RemoteService,
        RemoteService_var
      > (max)
{}

OASIS::RemoteServiceList::RemoteServiceList (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    OASIS::RemoteService_ptr * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::unbounded_object_reference_sequence<
        RemoteService,
        RemoteService_var
      >
    (max, length, buffer, release)
{}

OASIS::RemoteServiceList::RemoteServiceList (
    const RemoteServiceList &seq)
  : ::TAO::unbounded_object_reference_sequence<
        RemoteService,
        RemoteService_var
      > (seq)
{}

OASIS::RemoteServiceList::~RemoteServiceList (void)
{}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// .\be\be_visitor_exception\exception_ctor.cpp:54

OASIS::ServiceNotFound::ServiceNotFound (
    const char * _tao_name)
  : ::CORBA::UserException (
        "IDL:OASIS/ServiceNotFound:1.0",
        "ServiceNotFound"
      )
{
  this->name = ::CORBA::string_dup (_tao_name);
}



// TAO_IDL - Generated from
// .\be\be_visitor_exception\exception_cs.cpp:101

OASIS::ServiceNotFound::ServiceNotFound (void)
  : ::CORBA::UserException (
        "IDL:OASIS/ServiceNotFound:1.0",
        "ServiceNotFound"
      )
{
}

OASIS::ServiceNotFound::~ServiceNotFound (void)
{
}

OASIS::ServiceNotFound::ServiceNotFound (const ::OASIS::ServiceNotFound &_tao_excp)
  : ::CORBA::UserException (
        _tao_excp._rep_id (),
        _tao_excp._name ()
      )
{
  this->name = ::CORBA::string_dup (_tao_excp.name.in ());
}

OASIS::ServiceNotFound&
OASIS::ServiceNotFound::operator= (const ::OASIS::ServiceNotFound &_tao_excp)
{
  this->::CORBA::UserException::operator= (_tao_excp);
  this->name = ::CORBA::string_dup (_tao_excp.name.in ());
  return *this;
}

OASIS::ServiceNotFound *
OASIS::ServiceNotFound::_downcast ( ::CORBA::Exception *_tao_excp)
{
  return dynamic_cast<ServiceNotFound *> (_tao_excp);
}

const OASIS::ServiceNotFound *
OASIS::ServiceNotFound::_downcast ( ::CORBA::Exception const *_tao_excp)
{
  return dynamic_cast<const ServiceNotFound *> (_tao_excp);
}

::CORBA::Exception *OASIS::ServiceNotFound::_alloc (void)
{
  ::CORBA::Exception *retval = 0;
  ACE_NEW_RETURN (retval, ::OASIS::ServiceNotFound, 0);
  return retval;
}

::CORBA::Exception *
OASIS::ServiceNotFound::_tao_duplicate (void) const
{
  ::CORBA::Exception *result = 0;
  ACE_NEW_RETURN (
      result,
      ::OASIS::ServiceNotFound (*this),
      0
    );
  return result;
}

void OASIS::ServiceNotFound::_raise (void) const
{
  throw *this;
}

void OASIS::ServiceNotFound::_tao_encode (TAO_OutputCDR &cdr) const
{
  if (!(cdr << *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

void OASIS::ServiceNotFound::_tao_decode (TAO_InputCDR &cdr)
{
  if (!(cdr >> *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}



// TAO_IDL - Generated from
// .\be\be_visitor_exception\exception_ctor.cpp:54

OASIS::NoRemoteService::NoRemoteService (
    const char * _tao_name)
  : ::CORBA::UserException (
        "IDL:OASIS/NoRemoteService:1.0",
        "NoRemoteService"
      )
{
  this->name = ::CORBA::string_dup (_tao_name);
}



// TAO_IDL - Generated from
// .\be\be_visitor_exception\exception_cs.cpp:101

OASIS::NoRemoteService::NoRemoteService (void)
  : ::CORBA::UserException (
        "IDL:OASIS/NoRemoteService:1.0",
        "NoRemoteService"
      )
{
}

OASIS::NoRemoteService::~NoRemoteService (void)
{
}

OASIS::NoRemoteService::NoRemoteService (const ::OASIS::NoRemoteService &_tao_excp)
  : ::CORBA::UserException (
        _tao_excp._rep_id (),
        _tao_excp._name ()
      )
{
  this->name = ::CORBA::string_dup (_tao_excp.name.in ());
}

OASIS::NoRemoteService&
OASIS::NoRemoteService::operator= (const ::OASIS::NoRemoteService &_tao_excp)
{
  this->::CORBA::UserException::operator= (_tao_excp);
  this->name = ::CORBA::string_dup (_tao_excp.name.in ());
  return *this;
}

OASIS::NoRemoteService *
OASIS::NoRemoteService::_downcast ( ::CORBA::Exception *_tao_excp)
{
  return dynamic_cast<NoRemoteService *> (_tao_excp);
}

const OASIS::NoRemoteService *
OASIS::NoRemoteService::_downcast ( ::CORBA::Exception const *_tao_excp)
{
  return dynamic_cast<const NoRemoteService *> (_tao_excp);
}

::CORBA::Exception *OASIS::NoRemoteService::_alloc (void)
{
  ::CORBA::Exception *retval = 0;
  ACE_NEW_RETURN (retval, ::OASIS::NoRemoteService, 0);
  return retval;
}

::CORBA::Exception *
OASIS::NoRemoteService::_tao_duplicate (void) const
{
  ::CORBA::Exception *result = 0;
  ACE_NEW_RETURN (
      result,
      ::OASIS::NoRemoteService (*this),
      0
    );
  return result;
}

void OASIS::NoRemoteService::_raise (void) const
{
  throw *this;
}

void OASIS::NoRemoteService::_tao_encode (TAO_OutputCDR &cdr) const
{
  if (!(cdr << *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

void OASIS::NoRemoteService::_tao_decode (TAO_InputCDR &cdr)
{
  if (!(cdr >> *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}



// TAO_IDL - Generated from
// .\be\be_visitor_exception\exception_ctor.cpp:54

OASIS::ProbeNotFound::ProbeNotFound (
    const char * _tao_name,
    const char * _tao_einode)
  : ::CORBA::UserException (
        "IDL:OASIS/ProbeNotFound:1.0",
        "ProbeNotFound"
      )
{
  this->name = ::CORBA::string_dup (_tao_name);
  this->einode = ::CORBA::string_dup (_tao_einode);
}



// TAO_IDL - Generated from
// .\be\be_visitor_exception\exception_cs.cpp:101

OASIS::ProbeNotFound::ProbeNotFound (void)
  : ::CORBA::UserException (
        "IDL:OASIS/ProbeNotFound:1.0",
        "ProbeNotFound"
      )
{
}

OASIS::ProbeNotFound::~ProbeNotFound (void)
{
}

OASIS::ProbeNotFound::ProbeNotFound (const ::OASIS::ProbeNotFound &_tao_excp)
  : ::CORBA::UserException (
        _tao_excp._rep_id (),
        _tao_excp._name ()
      )
{
  this->name = ::CORBA::string_dup (_tao_excp.name.in ());
  this->einode = ::CORBA::string_dup (_tao_excp.einode.in ());
}

OASIS::ProbeNotFound&
OASIS::ProbeNotFound::operator= (const ::OASIS::ProbeNotFound &_tao_excp)
{
  this->::CORBA::UserException::operator= (_tao_excp);
  this->name = ::CORBA::string_dup (_tao_excp.name.in ());
  this->einode = ::CORBA::string_dup (_tao_excp.einode.in ());
  return *this;
}

OASIS::ProbeNotFound *
OASIS::ProbeNotFound::_downcast ( ::CORBA::Exception *_tao_excp)
{
  return dynamic_cast<ProbeNotFound *> (_tao_excp);
}

const OASIS::ProbeNotFound *
OASIS::ProbeNotFound::_downcast ( ::CORBA::Exception const *_tao_excp)
{
  return dynamic_cast<const ProbeNotFound *> (_tao_excp);
}

::CORBA::Exception *OASIS::ProbeNotFound::_alloc (void)
{
  ::CORBA::Exception *retval = 0;
  ACE_NEW_RETURN (retval, ::OASIS::ProbeNotFound, 0);
  return retval;
}

::CORBA::Exception *
OASIS::ProbeNotFound::_tao_duplicate (void) const
{
  ::CORBA::Exception *result = 0;
  ACE_NEW_RETURN (
      result,
      ::OASIS::ProbeNotFound (*this),
      0
    );
  return result;
}

void OASIS::ProbeNotFound::_raise (void) const
{
  throw *this;
}

void OASIS::ProbeNotFound::_tao_encode (TAO_OutputCDR &cdr) const
{
  if (!(cdr << *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

void OASIS::ProbeNotFound::_tao_decode (TAO_InputCDR &cdr)
{
  if (!(cdr >> *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}



// TAO_IDL - Generated from
// .\be\be_visitor_sequence\sequence_cs.cpp:73

#if !defined (_OASIS_PROBEINSTANCELIST_CS_)
#define _OASIS_PROBEINSTANCELIST_CS_

OASIS::ProbeInstanceList::ProbeInstanceList (void)
{}

OASIS::ProbeInstanceList::ProbeInstanceList (
    ::CORBA::ULong max)
  : ::TAO::unbounded_value_sequence<
        ProbeInstance
      > (max)
{}

OASIS::ProbeInstanceList::ProbeInstanceList (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    OASIS::ProbeInstance * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::unbounded_value_sequence<
        ProbeInstance
      >
    (max, length, buffer, release)
{}

OASIS::ProbeInstanceList::ProbeInstanceList (
    const ProbeInstanceList &seq)
  : ::TAO::unbounded_value_sequence<
        ProbeInstance
      > (seq)
{}

OASIS::ProbeInstanceList::~ProbeInstanceList (void)
{}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// .\be\be_visitor_interface\interface_cs.cpp:51

// Traits specializations for OASIS::DataAcquisitionController.

OASIS::DataAcquisitionController_ptr
TAO::Objref_Traits<OASIS::DataAcquisitionController>::duplicate (
    OASIS::DataAcquisitionController_ptr p)
{
  return OASIS::DataAcquisitionController::_duplicate (p);
}

void
TAO::Objref_Traits<OASIS::DataAcquisitionController>::release (
    OASIS::DataAcquisitionController_ptr p)
{
  ::CORBA::release (p);
}

OASIS::DataAcquisitionController_ptr
TAO::Objref_Traits<OASIS::DataAcquisitionController>::nil (void)
{
  return OASIS::DataAcquisitionController::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<OASIS::DataAcquisitionController>::marshal (
    const OASIS::DataAcquisitionController_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// TAO_IDL - Generated from
// .\be\be_visitor_operation\operation_cs.cpp:91

char *
OASIS::DataAcquisitionController::name (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< char *>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "_get_name",
      9,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// .\be\be_visitor_operation\operation_cs.cpp:91

void
OASIS::DataAcquisitionController::send_command (
  const char * einode,
  const char * cmdstr)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< char *>::in_arg_val _tao_einode (einode);
  TAO::Arg_Traits< char *>::in_arg_val _tao_cmdstr (cmdstr);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_einode,
      &_tao_cmdstr
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      3,
      "send_command",
      12,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
    );

  _tao_call.invoke (0, 0);
}

// TAO_IDL - Generated from
// .\be\be_visitor_operation\operation_cs.cpp:91

::OASIS::RemoteService_ptr
OASIS::DataAcquisitionController::get_service (
  const char * name)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< ::OASIS::RemoteService>::ret_val _tao_retval;
  TAO::Arg_Traits< char *>::in_arg_val _tao_name (name);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_name
    };

  static TAO::Exception_Data
  _tao_OASIS_DataAcquisitionController_get_service_exceptiondata [] = 
    {
      {
        "IDL:OASIS/ServiceNotFound:1.0",
        OASIS::ServiceNotFound::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , 0
#endif /* TAO_HAS_INTERCEPTORS */
      },

      {
        "IDL:OASIS/NoRemoteService:1.0",
        OASIS::NoRemoteService::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , 0
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "get_service",
      11,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
    );

  _tao_call.invoke (
      _tao_OASIS_DataAcquisitionController_get_service_exceptiondata,
      2
    );

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// .\be\be_visitor_operation\operation_cs.cpp:91

::OASIS::RemoteServiceList *
OASIS::DataAcquisitionController::get_services (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< ::OASIS::RemoteServiceList>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "get_services",
      12,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// .\be\be_visitor_operation\operation_cs.cpp:91

::OASIS::ProbeInstanceList *
OASIS::DataAcquisitionController::get_probe_instances (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< ::OASIS::ProbeInstanceList>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "get_probe_instances",
      19,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// .\be\be_visitor_operation\operation_cs.cpp:91

char *
OASIS::DataAcquisitionController::get_schema (
  const char * name,
  const char * einode)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< char *>::ret_val _tao_retval;
  TAO::Arg_Traits< char *>::in_arg_val _tao_name (name);
  TAO::Arg_Traits< char *>::in_arg_val _tao_einode (einode);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_name,
      &_tao_einode
    };

  static TAO::Exception_Data
  _tao_OASIS_DataAcquisitionController_get_schema_exceptiondata [] = 
    {
      {
        "IDL:OASIS/ProbeNotFound:1.0",
        OASIS::ProbeNotFound::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , 0
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      3,
      "get_schema",
      10,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
    );

  _tao_call.invoke (
      _tao_OASIS_DataAcquisitionController_get_schema_exceptiondata,
      1
    );

  return _tao_retval.retn ();
}

OASIS::DataAcquisitionController::DataAcquisitionController (void)
{
}

OASIS::DataAcquisitionController::~DataAcquisitionController (void)
{
}

OASIS::DataAcquisitionController_ptr
OASIS::DataAcquisitionController::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<DataAcquisitionController>::narrow (
        _tao_objref,
        "IDL:OASIS/DataAcquisitionController:1.0");
}

OASIS::DataAcquisitionController_ptr
OASIS::DataAcquisitionController::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<DataAcquisitionController>::unchecked_narrow (
        _tao_objref);
}

OASIS::DataAcquisitionController_ptr
OASIS::DataAcquisitionController::_nil (void)
{
  return 0;
}

OASIS::DataAcquisitionController_ptr
OASIS::DataAcquisitionController::_duplicate (DataAcquisitionController_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
OASIS::DataAcquisitionController::_tao_release (DataAcquisitionController_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
OASIS::DataAcquisitionController::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:OASIS/DataAcquisitionController:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* OASIS::DataAcquisitionController::_interface_repository_id (void) const
{
  return "IDL:OASIS/DataAcquisitionController:1.0";
}

::CORBA::Boolean
OASIS::DataAcquisitionController::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// .\be\be_visitor_sequence\cdr_op_cs.cpp:96
#if !defined _TAO_CDR_OP_OASIS_RemoteServiceList_CPP_
#define _TAO_CDR_OP_OASIS_RemoteServiceList_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const OASIS::RemoteServiceList &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    OASIS::RemoteServiceList &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_OASIS_RemoteServiceList_CPP_ */

// TAO_IDL - Generated from
// .\be\be_visitor_exception\cdr_op_cs.cpp:51
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const OASIS::ServiceNotFound &_tao_aggregate
  )
{
  // First marshal the repository ID.
  if (strm << _tao_aggregate._rep_id ())
    {
      // Now marshal the members (if any).
      return (
        (strm << _tao_aggregate.name.in ())
       );
    }
  else
    {
      return false;
    }
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    OASIS::ServiceNotFound &_tao_aggregate
  )
{
  // Demarshal the members.
  return (
    (strm >> _tao_aggregate.name.out ())
  );
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// .\be\be_visitor_exception\cdr_op_cs.cpp:51
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const OASIS::NoRemoteService &_tao_aggregate
  )
{
  // First marshal the repository ID.
  if (strm << _tao_aggregate._rep_id ())
    {
      // Now marshal the members (if any).
      return (
        (strm << _tao_aggregate.name.in ())
       );
    }
  else
    {
      return false;
    }
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    OASIS::NoRemoteService &_tao_aggregate
  )
{
  // Demarshal the members.
  return (
    (strm >> _tao_aggregate.name.out ())
  );
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// .\be\be_visitor_exception\cdr_op_cs.cpp:51
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const OASIS::ProbeNotFound &_tao_aggregate
  )
{
  // First marshal the repository ID.
  if (strm << _tao_aggregate._rep_id ())
    {
      // Now marshal the members (if any).
      return (
        (strm << _tao_aggregate.name.in ()) &&
        (strm << _tao_aggregate.einode.in ())
       );
    }
  else
    {
      return false;
    }
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    OASIS::ProbeNotFound &_tao_aggregate
  )
{
  // Demarshal the members.
  return (
    (strm >> _tao_aggregate.name.out ()) &&
    (strm >> _tao_aggregate.einode.out ())
  );
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// .\be\be_visitor_structure\cdr_op_cs.cpp:52

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const OASIS::ProbeInstance &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.inst_name.in ()) &&
    (strm << _tao_aggregate.inst_uuid.in ()) &&
    (strm << _tao_aggregate.inst_type_name.in ()) &&
    (strm << _tao_aggregate.einode_name.in ());
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    OASIS::ProbeInstance &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.inst_name.out ()) &&
    (strm >> _tao_aggregate.inst_uuid.out ()) &&
    (strm >> _tao_aggregate.inst_type_name.out ()) &&
    (strm >> _tao_aggregate.einode_name.out ());
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// .\be\be_visitor_sequence\cdr_op_cs.cpp:96
#if !defined _TAO_CDR_OP_OASIS_ProbeInstanceList_CPP_
#define _TAO_CDR_OP_OASIS_ProbeInstanceList_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const OASIS::ProbeInstanceList &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    OASIS::ProbeInstanceList &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_OASIS_ProbeInstanceList_CPP_ */

// TAO_IDL - Generated from
// .\be\be_visitor_interface\cdr_op_cs.cpp:54

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const OASIS::DataAcquisitionController_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    OASIS::DataAcquisitionController_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::OASIS::DataAcquisitionController RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (obj.in ());
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



