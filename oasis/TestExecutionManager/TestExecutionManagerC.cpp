// -*- C++ -*-
// $Id$

/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.1.2
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.cs.wustl.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// .\be\be_codegen.cpp:376


#include "TestExecutionManagerC.h"
#include "tao/CDR.h"
#include "tao/Exception_Data.h"
#include "tao/Invocation_Adapter.h"
#include "tao/Object_T.h"
#include "tao/SystemException.h"
#include "ace/OS_NS_string.h"

#if !defined (__ACE_INLINE__)
#include "TestExecutionManagerC.inl"
#endif /* !defined INLINE */

// TAO_IDL - Generated from
// .\be\be_visitor_sequence\sequence_cs.cpp:73

#if !defined (_OASIS_DATAACQUISITIONCONTROLLERSEQ_CS_)
#define _OASIS_DATAACQUISITIONCONTROLLERSEQ_CS_

OASIS::DataAcquisitionControllerSeq::DataAcquisitionControllerSeq (void)
{}

OASIS::DataAcquisitionControllerSeq::DataAcquisitionControllerSeq (
    ::CORBA::ULong max)
  : ::TAO::unbounded_object_reference_sequence<
        DataAcquisitionController,
        DataAcquisitionController_var
      > (max)
{}

OASIS::DataAcquisitionControllerSeq::DataAcquisitionControllerSeq (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    OASIS::DataAcquisitionController_ptr * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::unbounded_object_reference_sequence<
        DataAcquisitionController,
        DataAcquisitionController_var
      >
    (max, length, buffer, release)
{}

OASIS::DataAcquisitionControllerSeq::DataAcquisitionControllerSeq (
    const DataAcquisitionControllerSeq &seq)
  : ::TAO::unbounded_object_reference_sequence<
        DataAcquisitionController,
        DataAcquisitionController_var
      > (seq)
{}

OASIS::DataAcquisitionControllerSeq::~DataAcquisitionControllerSeq (void)
{}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// .\be\be_visitor_interface\interface_cs.cpp:51

// Traits specializations for OASIS::TestExecutionManagerViewer.

OASIS::TestExecutionManagerViewer_ptr
TAO::Objref_Traits<OASIS::TestExecutionManagerViewer>::duplicate (
    OASIS::TestExecutionManagerViewer_ptr p)
{
  return OASIS::TestExecutionManagerViewer::_duplicate (p);
}

void
TAO::Objref_Traits<OASIS::TestExecutionManagerViewer>::release (
    OASIS::TestExecutionManagerViewer_ptr p)
{
  ::CORBA::release (p);
}

OASIS::TestExecutionManagerViewer_ptr
TAO::Objref_Traits<OASIS::TestExecutionManagerViewer>::nil (void)
{
  return OASIS::TestExecutionManagerViewer::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<OASIS::TestExecutionManagerViewer>::marshal (
    const OASIS::TestExecutionManagerViewer_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// TAO_IDL - Generated from
// .\be\be_visitor_exception\exception_cs.cpp:101

OASIS::TestExecutionManagerViewer::NotFound::NotFound (void)
  : ::CORBA::UserException (
        "IDL:OASIS/TestExecutionManagerViewer/NotFound:1.0",
        "NotFound"
      )
{
}

OASIS::TestExecutionManagerViewer::NotFound::~NotFound (void)
{
}

OASIS::TestExecutionManagerViewer::NotFound::NotFound (const ::OASIS::TestExecutionManagerViewer::NotFound &_tao_excp)
  : ::CORBA::UserException (
        _tao_excp._rep_id (),
        _tao_excp._name ()
      )
{
}

OASIS::TestExecutionManagerViewer::NotFound&
OASIS::TestExecutionManagerViewer::NotFound::operator= (const ::OASIS::TestExecutionManagerViewer::NotFound &_tao_excp)
{
  this->::CORBA::UserException::operator= (_tao_excp);
  return *this;
}

OASIS::TestExecutionManagerViewer::NotFound *
OASIS::TestExecutionManagerViewer::NotFound::_downcast ( ::CORBA::Exception *_tao_excp)
{
  return dynamic_cast<NotFound *> (_tao_excp);
}

const OASIS::TestExecutionManagerViewer::NotFound *
OASIS::TestExecutionManagerViewer::NotFound::_downcast ( ::CORBA::Exception const *_tao_excp)
{
  return dynamic_cast<const NotFound *> (_tao_excp);
}

::CORBA::Exception *OASIS::TestExecutionManagerViewer::NotFound::_alloc (void)
{
  ::CORBA::Exception *retval = 0;
  ACE_NEW_RETURN (retval, ::OASIS::TestExecutionManagerViewer::NotFound, 0);
  return retval;
}

::CORBA::Exception *
OASIS::TestExecutionManagerViewer::NotFound::_tao_duplicate (void) const
{
  ::CORBA::Exception *result = 0;
  ACE_NEW_RETURN (
      result,
      ::OASIS::TestExecutionManagerViewer::NotFound (*this),
      0
    );
  return result;
}

void OASIS::TestExecutionManagerViewer::NotFound::_raise (void) const
{
  throw *this;
}

void OASIS::TestExecutionManagerViewer::NotFound::_tao_encode (TAO_OutputCDR &cdr) const
{
  if (!(cdr << *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

void OASIS::TestExecutionManagerViewer::NotFound::_tao_decode (TAO_InputCDR &cdr)
{
  if (!(cdr >> *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}



// TAO_IDL - Generated from
// .\be\be_visitor_operation\operation_cs.cpp:91

char *
OASIS::TestExecutionManagerViewer::name (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< char *>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "_get_name",
      9,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// .\be\be_visitor_operation\operation_cs.cpp:91

::OASIS::DataAcquisitionControllerSeq *
OASIS::TestExecutionManagerViewer::get_DACs (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< ::OASIS::DataAcquisitionControllerSeq>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "get_DACs",
      8,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// .\be\be_visitor_operation\operation_cs.cpp:91

::OASIS::DataAcquisitionController_ptr
OASIS::TestExecutionManagerViewer::get_DAC (
  const char * name)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< ::OASIS::DataAcquisitionController>::ret_val _tao_retval;
  TAO::Arg_Traits< char *>::in_arg_val _tao_name (name);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_name
    };

  static TAO::Exception_Data
  _tao_OASIS_TestExecutionManagerViewer_get_DAC_exceptiondata [] = 
    {
      {
        "IDL:OASIS/TestExecutionManagerViewer/NotFound:1.0",
        OASIS::TestExecutionManagerViewer::NotFound::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , 0
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "get_DAC",
      7,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
    );

  _tao_call.invoke (
      _tao_OASIS_TestExecutionManagerViewer_get_DAC_exceptiondata,
      1
    );

  return _tao_retval.retn ();
}

OASIS::TestExecutionManagerViewer::TestExecutionManagerViewer (void)
{
}

OASIS::TestExecutionManagerViewer::~TestExecutionManagerViewer (void)
{
}

OASIS::TestExecutionManagerViewer_ptr
OASIS::TestExecutionManagerViewer::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<TestExecutionManagerViewer>::narrow (
        _tao_objref,
        "IDL:OASIS/TestExecutionManagerViewer:1.0");
}

OASIS::TestExecutionManagerViewer_ptr
OASIS::TestExecutionManagerViewer::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<TestExecutionManagerViewer>::unchecked_narrow (
        _tao_objref);
}

OASIS::TestExecutionManagerViewer_ptr
OASIS::TestExecutionManagerViewer::_nil (void)
{
  return 0;
}

OASIS::TestExecutionManagerViewer_ptr
OASIS::TestExecutionManagerViewer::_duplicate (TestExecutionManagerViewer_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
OASIS::TestExecutionManagerViewer::_tao_release (TestExecutionManagerViewer_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
OASIS::TestExecutionManagerViewer::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:OASIS/TestExecutionManagerViewer:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* OASIS::TestExecutionManagerViewer::_interface_repository_id (void) const
{
  return "IDL:OASIS/TestExecutionManagerViewer:1.0";
}

::CORBA::Boolean
OASIS::TestExecutionManagerViewer::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// .\be\be_visitor_interface\interface_cs.cpp:51

// Traits specializations for OASIS::TestExecutionManager.

OASIS::TestExecutionManager_ptr
TAO::Objref_Traits<OASIS::TestExecutionManager>::duplicate (
    OASIS::TestExecutionManager_ptr p)
{
  return OASIS::TestExecutionManager::_duplicate (p);
}

void
TAO::Objref_Traits<OASIS::TestExecutionManager>::release (
    OASIS::TestExecutionManager_ptr p)
{
  ::CORBA::release (p);
}

OASIS::TestExecutionManager_ptr
TAO::Objref_Traits<OASIS::TestExecutionManager>::nil (void)
{
  return OASIS::TestExecutionManager::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<OASIS::TestExecutionManager>::marshal (
    const OASIS::TestExecutionManager_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// TAO_IDL - Generated from
// .\be\be_visitor_exception\exception_cs.cpp:101

OASIS::TestExecutionManager::DuplicateName::DuplicateName (void)
  : ::CORBA::UserException (
        "IDL:OASIS/TestExecutionManager/DuplicateName:1.0",
        "DuplicateName"
      )
{
}

OASIS::TestExecutionManager::DuplicateName::~DuplicateName (void)
{
}

OASIS::TestExecutionManager::DuplicateName::DuplicateName (const ::OASIS::TestExecutionManager::DuplicateName &_tao_excp)
  : ::CORBA::UserException (
        _tao_excp._rep_id (),
        _tao_excp._name ()
      )
{
}

OASIS::TestExecutionManager::DuplicateName&
OASIS::TestExecutionManager::DuplicateName::operator= (const ::OASIS::TestExecutionManager::DuplicateName &_tao_excp)
{
  this->::CORBA::UserException::operator= (_tao_excp);
  return *this;
}

OASIS::TestExecutionManager::DuplicateName *
OASIS::TestExecutionManager::DuplicateName::_downcast ( ::CORBA::Exception *_tao_excp)
{
  return dynamic_cast<DuplicateName *> (_tao_excp);
}

const OASIS::TestExecutionManager::DuplicateName *
OASIS::TestExecutionManager::DuplicateName::_downcast ( ::CORBA::Exception const *_tao_excp)
{
  return dynamic_cast<const DuplicateName *> (_tao_excp);
}

::CORBA::Exception *OASIS::TestExecutionManager::DuplicateName::_alloc (void)
{
  ::CORBA::Exception *retval = 0;
  ACE_NEW_RETURN (retval, ::OASIS::TestExecutionManager::DuplicateName, 0);
  return retval;
}

::CORBA::Exception *
OASIS::TestExecutionManager::DuplicateName::_tao_duplicate (void) const
{
  ::CORBA::Exception *result = 0;
  ACE_NEW_RETURN (
      result,
      ::OASIS::TestExecutionManager::DuplicateName (*this),
      0
    );
  return result;
}

void OASIS::TestExecutionManager::DuplicateName::_raise (void) const
{
  throw *this;
}

void OASIS::TestExecutionManager::DuplicateName::_tao_encode (TAO_OutputCDR &cdr) const
{
  if (!(cdr << *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

void OASIS::TestExecutionManager::DuplicateName::_tao_decode (TAO_InputCDR &cdr)
{
  if (!(cdr >> *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}



// TAO_IDL - Generated from
// .\be\be_visitor_exception\exception_cs.cpp:101

OASIS::TestExecutionManager::RegisterFailed::RegisterFailed (void)
  : ::CORBA::UserException (
        "IDL:OASIS/TestExecutionManager/RegisterFailed:1.0",
        "RegisterFailed"
      )
{
}

OASIS::TestExecutionManager::RegisterFailed::~RegisterFailed (void)
{
}

OASIS::TestExecutionManager::RegisterFailed::RegisterFailed (const ::OASIS::TestExecutionManager::RegisterFailed &_tao_excp)
  : ::CORBA::UserException (
        _tao_excp._rep_id (),
        _tao_excp._name ()
      )
{
}

OASIS::TestExecutionManager::RegisterFailed&
OASIS::TestExecutionManager::RegisterFailed::operator= (const ::OASIS::TestExecutionManager::RegisterFailed &_tao_excp)
{
  this->::CORBA::UserException::operator= (_tao_excp);
  return *this;
}

OASIS::TestExecutionManager::RegisterFailed *
OASIS::TestExecutionManager::RegisterFailed::_downcast ( ::CORBA::Exception *_tao_excp)
{
  return dynamic_cast<RegisterFailed *> (_tao_excp);
}

const OASIS::TestExecutionManager::RegisterFailed *
OASIS::TestExecutionManager::RegisterFailed::_downcast ( ::CORBA::Exception const *_tao_excp)
{
  return dynamic_cast<const RegisterFailed *> (_tao_excp);
}

::CORBA::Exception *OASIS::TestExecutionManager::RegisterFailed::_alloc (void)
{
  ::CORBA::Exception *retval = 0;
  ACE_NEW_RETURN (retval, ::OASIS::TestExecutionManager::RegisterFailed, 0);
  return retval;
}

::CORBA::Exception *
OASIS::TestExecutionManager::RegisterFailed::_tao_duplicate (void) const
{
  ::CORBA::Exception *result = 0;
  ACE_NEW_RETURN (
      result,
      ::OASIS::TestExecutionManager::RegisterFailed (*this),
      0
    );
  return result;
}

void OASIS::TestExecutionManager::RegisterFailed::_raise (void) const
{
  throw *this;
}

void OASIS::TestExecutionManager::RegisterFailed::_tao_encode (TAO_OutputCDR &cdr) const
{
  if (!(cdr << *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

void OASIS::TestExecutionManager::RegisterFailed::_tao_decode (TAO_InputCDR &cdr)
{
  if (!(cdr >> *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}



// TAO_IDL - Generated from
// .\be\be_visitor_operation\operation_cs.cpp:91

void
OASIS::TestExecutionManager::register_DAC (
  ::OASIS::DataAcquisitionController_ptr dac)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::OASIS::DataAcquisitionController>::in_arg_val _tao_dac (dac);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_dac
    };

  static TAO::Exception_Data
  _tao_OASIS_TestExecutionManager_register_DAC_exceptiondata [] = 
    {
      {
        "IDL:OASIS/TestExecutionManager/DuplicateName:1.0",
        OASIS::TestExecutionManager::DuplicateName::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , 0
#endif /* TAO_HAS_INTERCEPTORS */
      },

      {
        "IDL:OASIS/TestExecutionManager/RegisterFailed:1.0",
        OASIS::TestExecutionManager::RegisterFailed::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , 0
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "register_DAC",
      12,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
    );

  _tao_call.invoke (
      _tao_OASIS_TestExecutionManager_register_DAC_exceptiondata,
      2
    );
}

// TAO_IDL - Generated from
// .\be\be_visitor_operation\operation_cs.cpp:91

void
OASIS::TestExecutionManager::unregister_DAC (
  ::OASIS::DataAcquisitionController_ptr dac)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::OASIS::DataAcquisitionController>::in_arg_val _tao_dac (dac);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_dac
    };

  static TAO::Exception_Data
  _tao_OASIS_TestExecutionManager_unregister_DAC_exceptiondata [] = 
    {
      {
        "IDL:OASIS/TestExecutionManagerViewer/NotFound:1.0",
        OASIS::TestExecutionManagerViewer::NotFound::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , 0
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "unregister_DAC",
      14,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
    );

  _tao_call.invoke (
      _tao_OASIS_TestExecutionManager_unregister_DAC_exceptiondata,
      1
    );
}

OASIS::TestExecutionManager::TestExecutionManager (void)
{
}

OASIS::TestExecutionManager::~TestExecutionManager (void)
{
}

OASIS::TestExecutionManager_ptr
OASIS::TestExecutionManager::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<TestExecutionManager>::narrow (
        _tao_objref,
        "IDL:OASIS/TestExecutionManager:1.0");
}

OASIS::TestExecutionManager_ptr
OASIS::TestExecutionManager::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<TestExecutionManager>::unchecked_narrow (
        _tao_objref);
}

OASIS::TestExecutionManager_ptr
OASIS::TestExecutionManager::_nil (void)
{
  return 0;
}

OASIS::TestExecutionManager_ptr
OASIS::TestExecutionManager::_duplicate (TestExecutionManager_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
OASIS::TestExecutionManager::_tao_release (TestExecutionManager_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
OASIS::TestExecutionManager::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:OASIS/TestExecutionManagerViewer:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:OASIS/TestExecutionManager:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* OASIS::TestExecutionManager::_interface_repository_id (void) const
{
  return "IDL:OASIS/TestExecutionManager:1.0";
}

::CORBA::Boolean
OASIS::TestExecutionManager::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// .\be\be_visitor_sequence\cdr_op_cs.cpp:96
#if !defined _TAO_CDR_OP_OASIS_DataAcquisitionControllerSeq_CPP_
#define _TAO_CDR_OP_OASIS_DataAcquisitionControllerSeq_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const OASIS::DataAcquisitionControllerSeq &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    OASIS::DataAcquisitionControllerSeq &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_OASIS_DataAcquisitionControllerSeq_CPP_ */

// TAO_IDL - Generated from
// .\be\be_visitor_exception\cdr_op_cs.cpp:51
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const OASIS::TestExecutionManagerViewer::NotFound &_tao_aggregate
  )
{
  // Marshal the repository ID.
  return (strm << _tao_aggregate._rep_id ());
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &,
    OASIS::TestExecutionManagerViewer::NotFound&
  )
{
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// .\be\be_visitor_interface\cdr_op_cs.cpp:54

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const OASIS::TestExecutionManagerViewer_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    OASIS::TestExecutionManagerViewer_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::OASIS::TestExecutionManagerViewer RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (obj.in ());
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// .\be\be_visitor_exception\cdr_op_cs.cpp:51
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const OASIS::TestExecutionManager::DuplicateName &_tao_aggregate
  )
{
  // Marshal the repository ID.
  return (strm << _tao_aggregate._rep_id ());
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &,
    OASIS::TestExecutionManager::DuplicateName&
  )
{
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// .\be\be_visitor_exception\cdr_op_cs.cpp:51
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const OASIS::TestExecutionManager::RegisterFailed &_tao_aggregate
  )
{
  // Marshal the repository ID.
  return (strm << _tao_aggregate._rep_id ());
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &,
    OASIS::TestExecutionManager::RegisterFailed&
  )
{
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// .\be\be_visitor_interface\cdr_op_cs.cpp:54

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const OASIS::TestExecutionManager_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    OASIS::TestExecutionManager_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::OASIS::TestExecutionManager RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (obj.in ());
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



