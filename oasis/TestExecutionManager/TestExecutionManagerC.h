// -*- C++ -*-
// $Id$

/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.1.2
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.cs.wustl.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// .\be\be_codegen.cpp:152

#ifndef _TAO_IDL_TESTEXECUTIONMANAGERC_I217LX_H_
#define _TAO_IDL_TESTEXECUTIONMANAGERC_I217LX_H_

#include /**/ "ace/pre.h"


#include /**/ "ace/config-all.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */


#include /**/ "TestExecutionManager_stub_export.h"
#include "tao/ORB.h"
#include "tao/SystemException.h"
#include "tao/UserException.h"
#include "tao/Basic_Types.h"
#include "tao/ORB_Constants.h"
#include "tao/Object.h"
#include "tao/String_Manager_T.h"
#include "tao/Sequence_T.h"
#include "tao/Objref_VarOut_T.h"
#include "tao/Seq_Var_T.h"
#include "tao/Seq_Out_T.h"
#include "tao/VarOut_T.h"
#include "tao/Arg_Traits_T.h"
#include "tao/Basic_Arguments.h"
#include "tao/Special_Basic_Arguments.h"
#include "tao/Any_Insert_Policy_T.h"
#include "tao/Fixed_Size_Argument_T.h"
#include "tao/Var_Size_Argument_T.h"
#include "tao/Object_Argument_T.h"
#include "tao/UB_String_Arguments.h"
#include /**/ "tao/Version.h"
#include /**/ "tao/Versioned_Namespace.h"

#include "oasis/DataAcquisitionController/DataAcquisitionControllerC.h"

#if TAO_MAJOR_VERSION != 2 || TAO_MINOR_VERSION != 1 || TAO_BETA_VERSION != 2
#error This file should be regenerated with TAO_IDL
#endif

#if defined (TAO_EXPORT_MACRO)
#undef TAO_EXPORT_MACRO
#endif
#define TAO_EXPORT_MACRO OASIS_TESTEXECUTIONMANAGER_STUB_Export

// TAO_IDL - Generated from
// .\be\be_visitor_root\root_ch.cpp:160
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<typename T> class Narrow_Utils;
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// .\be\be_visitor_module\module_ch.cpp:38

namespace OASIS
{

  // TAO_IDL - Generated from
  // .\be\be_visitor_sequence\sequence_ch.cpp:102

#if !defined (_OASIS_DATAACQUISITIONCONTROLLERSEQ_CH_)
#define _OASIS_DATAACQUISITIONCONTROLLERSEQ_CH_

  class DataAcquisitionControllerSeq;

  typedef
    ::TAO_VarSeq_Var_T<
        DataAcquisitionControllerSeq
      >
    DataAcquisitionControllerSeq_var;

  typedef
    ::TAO_Seq_Out_T<
        DataAcquisitionControllerSeq
      >
    DataAcquisitionControllerSeq_out;

  class OASIS_TESTEXECUTIONMANAGER_STUB_Export DataAcquisitionControllerSeq
    : public
        ::TAO::unbounded_object_reference_sequence<
            DataAcquisitionController,
            DataAcquisitionController_var
          >
  {
  public:
    DataAcquisitionControllerSeq (void);
    DataAcquisitionControllerSeq ( ::CORBA::ULong max);
    DataAcquisitionControllerSeq (
      ::CORBA::ULong max,
      ::CORBA::ULong length,
      DataAcquisitionController_ptr* buffer,
      ::CORBA::Boolean release = false);
    DataAcquisitionControllerSeq (const DataAcquisitionControllerSeq &);
    virtual ~DataAcquisitionControllerSeq (void);
    

    // TAO_IDL - Generated from
    // .\be\be_type.cpp:307

    
    typedef DataAcquisitionControllerSeq_var _var_type;
    typedef DataAcquisitionControllerSeq_out _out_type;
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // .\be\be_interface.cpp:750

#if !defined (_OASIS_TESTEXECUTIONMANAGERVIEWER__VAR_OUT_CH_)
#define _OASIS_TESTEXECUTIONMANAGERVIEWER__VAR_OUT_CH_

  class TestExecutionManagerViewer;
  typedef TestExecutionManagerViewer *TestExecutionManagerViewer_ptr;

  typedef
    TAO_Objref_Var_T<
        TestExecutionManagerViewer
      >
    TestExecutionManagerViewer_var;
  
  typedef
    TAO_Objref_Out_T<
        TestExecutionManagerViewer
      >
    TestExecutionManagerViewer_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // .\be\be_visitor_interface\interface_ch.cpp:43

  class OASIS_TESTEXECUTIONMANAGER_STUB_Export TestExecutionManagerViewer
    : public virtual ::CORBA::Object
  {
  public:
    friend class TAO::Narrow_Utils<TestExecutionManagerViewer>;

    // TAO_IDL - Generated from
    // .\be\be_type.cpp:307

    typedef TestExecutionManagerViewer_ptr _ptr_type;
    typedef TestExecutionManagerViewer_var _var_type;
    typedef TestExecutionManagerViewer_out _out_type;

    // The static operations.
    static TestExecutionManagerViewer_ptr _duplicate (TestExecutionManagerViewer_ptr obj);

    static void _tao_release (TestExecutionManagerViewer_ptr obj);

    static TestExecutionManagerViewer_ptr _narrow (::CORBA::Object_ptr obj);
    static TestExecutionManagerViewer_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static TestExecutionManagerViewer_ptr _nil (void);

    // TAO_IDL - Generated from
    // .\be\be_visitor_exception\exception_ch.cpp:44

    class OASIS_TESTEXECUTIONMANAGER_STUB_Export NotFound : public ::CORBA::UserException
    {
    public:

      NotFound (void);
      NotFound (const NotFound &);
      ~NotFound (void);

      NotFound &operator= (const NotFound &);

      static NotFound *_downcast ( ::CORBA::Exception *);
      static const NotFound *_downcast ( ::CORBA::Exception const *);

      static ::CORBA::Exception *_alloc (void);

      virtual ::CORBA::Exception *_tao_duplicate (void) const;

      virtual void _raise (void) const;

      virtual void _tao_encode (TAO_OutputCDR &cdr) const;
      virtual void _tao_decode (TAO_InputCDR &cdr);
    };

    virtual char * name (
      void);

    virtual ::OASIS::DataAcquisitionControllerSeq * get_DACs (
      void);

    virtual ::OASIS::DataAcquisitionController_ptr get_DAC (
      const char * name);

    // TAO_IDL - Generated from
    // .\be\be_visitor_interface\interface_ch.cpp:140

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Concrete interface only.
    TestExecutionManagerViewer (void);

    // Concrete non-local interface only.
    TestExecutionManagerViewer (
        ::IOP::IOR *ior,
        TAO_ORB_Core *orb_core);
    
    // Non-local interface only.
    TestExecutionManagerViewer (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = 0,
        TAO_ORB_Core *orb_core = 0);

    virtual ~TestExecutionManagerViewer (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    TestExecutionManagerViewer (const TestExecutionManagerViewer &);

    void operator= (const TestExecutionManagerViewer &);
  };

  // TAO_IDL - Generated from
  // .\be\be_interface.cpp:750

#if !defined (_OASIS_TESTEXECUTIONMANAGER__VAR_OUT_CH_)
#define _OASIS_TESTEXECUTIONMANAGER__VAR_OUT_CH_

  class TestExecutionManager;
  typedef TestExecutionManager *TestExecutionManager_ptr;

  typedef
    TAO_Objref_Var_T<
        TestExecutionManager
      >
    TestExecutionManager_var;
  
  typedef
    TAO_Objref_Out_T<
        TestExecutionManager
      >
    TestExecutionManager_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // .\be\be_visitor_interface\interface_ch.cpp:43

  class OASIS_TESTEXECUTIONMANAGER_STUB_Export TestExecutionManager
    : public virtual ::OASIS::TestExecutionManagerViewer
  
  {
  public:
    friend class TAO::Narrow_Utils<TestExecutionManager>;

    // TAO_IDL - Generated from
    // .\be\be_type.cpp:307

    typedef TestExecutionManager_ptr _ptr_type;
    typedef TestExecutionManager_var _var_type;
    typedef TestExecutionManager_out _out_type;

    // The static operations.
    static TestExecutionManager_ptr _duplicate (TestExecutionManager_ptr obj);

    static void _tao_release (TestExecutionManager_ptr obj);

    static TestExecutionManager_ptr _narrow (::CORBA::Object_ptr obj);
    static TestExecutionManager_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static TestExecutionManager_ptr _nil (void);

    // TAO_IDL - Generated from
    // .\be\be_visitor_exception\exception_ch.cpp:44

    class OASIS_TESTEXECUTIONMANAGER_STUB_Export DuplicateName : public ::CORBA::UserException
    {
    public:

      DuplicateName (void);
      DuplicateName (const DuplicateName &);
      ~DuplicateName (void);

      DuplicateName &operator= (const DuplicateName &);

      static DuplicateName *_downcast ( ::CORBA::Exception *);
      static const DuplicateName *_downcast ( ::CORBA::Exception const *);

      static ::CORBA::Exception *_alloc (void);

      virtual ::CORBA::Exception *_tao_duplicate (void) const;

      virtual void _raise (void) const;

      virtual void _tao_encode (TAO_OutputCDR &cdr) const;
      virtual void _tao_decode (TAO_InputCDR &cdr);
    };

    // TAO_IDL - Generated from
    // .\be\be_visitor_exception\exception_ch.cpp:44

    class OASIS_TESTEXECUTIONMANAGER_STUB_Export RegisterFailed : public ::CORBA::UserException
    {
    public:

      RegisterFailed (void);
      RegisterFailed (const RegisterFailed &);
      ~RegisterFailed (void);

      RegisterFailed &operator= (const RegisterFailed &);

      static RegisterFailed *_downcast ( ::CORBA::Exception *);
      static const RegisterFailed *_downcast ( ::CORBA::Exception const *);

      static ::CORBA::Exception *_alloc (void);

      virtual ::CORBA::Exception *_tao_duplicate (void) const;

      virtual void _raise (void) const;

      virtual void _tao_encode (TAO_OutputCDR &cdr) const;
      virtual void _tao_decode (TAO_InputCDR &cdr);
    };

    virtual void register_DAC (
      ::OASIS::DataAcquisitionController_ptr dac);

    virtual void unregister_DAC (
      ::OASIS::DataAcquisitionController_ptr dac);

    // TAO_IDL - Generated from
    // .\be\be_visitor_interface\interface_ch.cpp:140

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Concrete interface only.
    TestExecutionManager (void);

    // Concrete non-local interface only.
    TestExecutionManager (
        ::IOP::IOR *ior,
        TAO_ORB_Core *orb_core);
    
    // Non-local interface only.
    TestExecutionManager (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = 0,
        TAO_ORB_Core *orb_core = 0);

    virtual ~TestExecutionManager (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    TestExecutionManager (const TestExecutionManager &);

    void operator= (const TestExecutionManager &);
  };

// TAO_IDL - Generated from
// .\be\be_visitor_module\module_ch.cpp:67

} // module OASIS

// TAO_IDL - Generated from
// .\be\be_visitor_arg_traits.cpp:68

TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Arg traits specializations.
namespace TAO
{

  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:685

  template<>
  class Arg_Traits< ::OASIS::DataAcquisitionControllerSeq>
    : public
        Var_Size_Arg_Traits_T<
            ::OASIS::DataAcquisitionControllerSeq,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:147

#if !defined (_OASIS_TESTEXECUTIONMANAGERVIEWER__ARG_TRAITS_)
#define _OASIS_TESTEXECUTIONMANAGERVIEWER__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::OASIS::TestExecutionManagerViewer>
    : public
        Object_Arg_Traits_T<
            ::OASIS::TestExecutionManagerViewer_ptr,
            ::OASIS::TestExecutionManagerViewer_var,
            ::OASIS::TestExecutionManagerViewer_out,
            TAO::Objref_Traits<OASIS::TestExecutionManagerViewer>,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:147

#if !defined (_OASIS_TESTEXECUTIONMANAGER__ARG_TRAITS_)
#define _OASIS_TESTEXECUTIONMANAGER__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::OASIS::TestExecutionManager>
    : public
        Object_Arg_Traits_T<
            ::OASIS::TestExecutionManager_ptr,
            ::OASIS::TestExecutionManager_var,
            ::OASIS::TestExecutionManager_out,
            TAO::Objref_Traits<OASIS::TestExecutionManager>,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

#endif /* end #if !defined */
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// .\be\be_visitor_traits.cpp:62

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations.
namespace TAO
{

#if !defined (_OASIS_TESTEXECUTIONMANAGERVIEWER__TRAITS_)
#define _OASIS_TESTEXECUTIONMANAGERVIEWER__TRAITS_

  template<>
  struct OASIS_TESTEXECUTIONMANAGER_STUB_Export Objref_Traits< ::OASIS::TestExecutionManagerViewer>
  {
    static ::OASIS::TestExecutionManagerViewer_ptr duplicate (
        ::OASIS::TestExecutionManagerViewer_ptr p);
    static void release (
        ::OASIS::TestExecutionManagerViewer_ptr p);
    static ::OASIS::TestExecutionManagerViewer_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::OASIS::TestExecutionManagerViewer_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_OASIS_TESTEXECUTIONMANAGER__TRAITS_)
#define _OASIS_TESTEXECUTIONMANAGER__TRAITS_

  template<>
  struct OASIS_TESTEXECUTIONMANAGER_STUB_Export Objref_Traits< ::OASIS::TestExecutionManager>
  {
    static ::OASIS::TestExecutionManager_ptr duplicate (
        ::OASIS::TestExecutionManager_ptr p);
    static void release (
        ::OASIS::TestExecutionManager_ptr p);
    static ::OASIS::TestExecutionManager_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::OASIS::TestExecutionManager_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// .\be\be_visitor_sequence\cdr_op_ch.cpp:68

#if !defined _TAO_CDR_OP_OASIS_DataAcquisitionControllerSeq_H_
#define _TAO_CDR_OP_OASIS_DataAcquisitionControllerSeq_H_
TAO_BEGIN_VERSIONED_NAMESPACE_DECL


OASIS_TESTEXECUTIONMANAGER_STUB_Export ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const OASIS::DataAcquisitionControllerSeq &_tao_sequence);
OASIS_TESTEXECUTIONMANAGER_STUB_Export ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    OASIS::DataAcquisitionControllerSeq &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* _TAO_CDR_OP_OASIS_DataAcquisitionControllerSeq_H_ */

// TAO_IDL - Generated from
// .\be\be_visitor_interface\cdr_op_ch.cpp:44

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

OASIS_TESTEXECUTIONMANAGER_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const OASIS::TestExecutionManagerViewer_ptr );
OASIS_TESTEXECUTIONMANAGER_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, OASIS::TestExecutionManagerViewer_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// .\be\be_visitor_exception\cdr_op_ch.cpp:40
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



OASIS_TESTEXECUTIONMANAGER_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const OASIS::TestExecutionManagerViewer::NotFound &);
OASIS_TESTEXECUTIONMANAGER_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, OASIS::TestExecutionManagerViewer::NotFound &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// .\be\be_visitor_interface\cdr_op_ch.cpp:44

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

OASIS_TESTEXECUTIONMANAGER_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const OASIS::TestExecutionManager_ptr );
OASIS_TESTEXECUTIONMANAGER_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, OASIS::TestExecutionManager_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// .\be\be_visitor_exception\cdr_op_ch.cpp:40
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



OASIS_TESTEXECUTIONMANAGER_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const OASIS::TestExecutionManager::DuplicateName &);
OASIS_TESTEXECUTIONMANAGER_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, OASIS::TestExecutionManager::DuplicateName &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// .\be\be_visitor_exception\cdr_op_ch.cpp:40
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



OASIS_TESTEXECUTIONMANAGER_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const OASIS::TestExecutionManager::RegisterFailed &);
OASIS_TESTEXECUTIONMANAGER_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, OASIS::TestExecutionManager::RegisterFailed &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// .\be\be_codegen.cpp:1703
#if defined (__ACE_INLINE__)
#include "TestExecutionManagerC.inl"
#endif /* defined INLINE */

#include /**/ "ace/post.h"

#endif /* ifndef */

