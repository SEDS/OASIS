// -*- C++ -*-
// $Id$

/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.1.2
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.cs.wustl.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// .\be\be_codegen.cpp:376


#include "OASIS_CommonC.h"
#include "tao/CDR.h"
#include "tao/ORB_Core.h"
#include "tao/SystemException.h"
#include "ace/OS_NS_string.h"

#if !defined (__ACE_INLINE__)
#include "OASIS_CommonC.inl"
#endif /* !defined INLINE */

// TAO_IDL - Generated from
// .\be\be_visitor_exception\exception_cs.cpp:101

OASIS::DuplicateRegistration::DuplicateRegistration (void)
  : ::CORBA::UserException (
        "IDL:OASIS/DuplicateRegistration:1.0",
        "DuplicateRegistration"
      )
{
}

OASIS::DuplicateRegistration::~DuplicateRegistration (void)
{
}

OASIS::DuplicateRegistration::DuplicateRegistration (const ::OASIS::DuplicateRegistration &_tao_excp)
  : ::CORBA::UserException (
        _tao_excp._rep_id (),
        _tao_excp._name ()
      )
{
}

OASIS::DuplicateRegistration&
OASIS::DuplicateRegistration::operator= (const ::OASIS::DuplicateRegistration &_tao_excp)
{
  this->::CORBA::UserException::operator= (_tao_excp);
  return *this;
}

OASIS::DuplicateRegistration *
OASIS::DuplicateRegistration::_downcast ( ::CORBA::Exception *_tao_excp)
{
  return dynamic_cast<DuplicateRegistration *> (_tao_excp);
}

const OASIS::DuplicateRegistration *
OASIS::DuplicateRegistration::_downcast ( ::CORBA::Exception const *_tao_excp)
{
  return dynamic_cast<const DuplicateRegistration *> (_tao_excp);
}

::CORBA::Exception *OASIS::DuplicateRegistration::_alloc (void)
{
  ::CORBA::Exception *retval = 0;
  ACE_NEW_RETURN (retval, ::OASIS::DuplicateRegistration, 0);
  return retval;
}

::CORBA::Exception *
OASIS::DuplicateRegistration::_tao_duplicate (void) const
{
  ::CORBA::Exception *result = 0;
  ACE_NEW_RETURN (
      result,
      ::OASIS::DuplicateRegistration (*this),
      0
    );
  return result;
}

void OASIS::DuplicateRegistration::_raise (void) const
{
  throw *this;
}

void OASIS::DuplicateRegistration::_tao_encode (TAO_OutputCDR &cdr) const
{
  if (!(cdr << *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

void OASIS::DuplicateRegistration::_tao_decode (TAO_InputCDR &cdr)
{
  if (!(cdr >> *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}



// TAO_IDL - Generated from
// .\be\be_visitor_exception\exception_cs.cpp:101

OASIS::RegistrationFailed::RegistrationFailed (void)
  : ::CORBA::UserException (
        "IDL:OASIS/RegistrationFailed:1.0",
        "RegistrationFailed"
      )
{
}

OASIS::RegistrationFailed::~RegistrationFailed (void)
{
}

OASIS::RegistrationFailed::RegistrationFailed (const ::OASIS::RegistrationFailed &_tao_excp)
  : ::CORBA::UserException (
        _tao_excp._rep_id (),
        _tao_excp._name ()
      )
{
}

OASIS::RegistrationFailed&
OASIS::RegistrationFailed::operator= (const ::OASIS::RegistrationFailed &_tao_excp)
{
  this->::CORBA::UserException::operator= (_tao_excp);
  return *this;
}

OASIS::RegistrationFailed *
OASIS::RegistrationFailed::_downcast ( ::CORBA::Exception *_tao_excp)
{
  return dynamic_cast<RegistrationFailed *> (_tao_excp);
}

const OASIS::RegistrationFailed *
OASIS::RegistrationFailed::_downcast ( ::CORBA::Exception const *_tao_excp)
{
  return dynamic_cast<const RegistrationFailed *> (_tao_excp);
}

::CORBA::Exception *OASIS::RegistrationFailed::_alloc (void)
{
  ::CORBA::Exception *retval = 0;
  ACE_NEW_RETURN (retval, ::OASIS::RegistrationFailed, 0);
  return retval;
}

::CORBA::Exception *
OASIS::RegistrationFailed::_tao_duplicate (void) const
{
  ::CORBA::Exception *result = 0;
  ACE_NEW_RETURN (
      result,
      ::OASIS::RegistrationFailed (*this),
      0
    );
  return result;
}

void OASIS::RegistrationFailed::_raise (void) const
{
  throw *this;
}

void OASIS::RegistrationFailed::_tao_encode (TAO_OutputCDR &cdr) const
{
  if (!(cdr << *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

void OASIS::RegistrationFailed::_tao_decode (TAO_InputCDR &cdr)
{
  if (!(cdr >> *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}



// TAO_IDL - Generated from
// .\be\be_visitor_exception\exception_cs.cpp:101

OASIS::InvalidData::InvalidData (void)
  : ::CORBA::UserException (
        "IDL:OASIS/InvalidData:1.0",
        "InvalidData"
      )
{
}

OASIS::InvalidData::~InvalidData (void)
{
}

OASIS::InvalidData::InvalidData (const ::OASIS::InvalidData &_tao_excp)
  : ::CORBA::UserException (
        _tao_excp._rep_id (),
        _tao_excp._name ()
      )
{
}

OASIS::InvalidData&
OASIS::InvalidData::operator= (const ::OASIS::InvalidData &_tao_excp)
{
  this->::CORBA::UserException::operator= (_tao_excp);
  return *this;
}

OASIS::InvalidData *
OASIS::InvalidData::_downcast ( ::CORBA::Exception *_tao_excp)
{
  return dynamic_cast<InvalidData *> (_tao_excp);
}

const OASIS::InvalidData *
OASIS::InvalidData::_downcast ( ::CORBA::Exception const *_tao_excp)
{
  return dynamic_cast<const InvalidData *> (_tao_excp);
}

::CORBA::Exception *OASIS::InvalidData::_alloc (void)
{
  ::CORBA::Exception *retval = 0;
  ACE_NEW_RETURN (retval, ::OASIS::InvalidData, 0);
  return retval;
}

::CORBA::Exception *
OASIS::InvalidData::_tao_duplicate (void) const
{
  ::CORBA::Exception *result = 0;
  ACE_NEW_RETURN (
      result,
      ::OASIS::InvalidData (*this),
      0
    );
  return result;
}

void OASIS::InvalidData::_raise (void) const
{
  throw *this;
}

void OASIS::InvalidData::_tao_encode (TAO_OutputCDR &cdr) const
{
  if (!(cdr << *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

void OASIS::InvalidData::_tao_decode (TAO_InputCDR &cdr)
{
  if (!(cdr >> *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}



// TAO_IDL - Generated from
// .\be\be_visitor_exception\exception_cs.cpp:101

OASIS::InvalidFormat::InvalidFormat (void)
  : ::CORBA::UserException (
        "IDL:OASIS/InvalidFormat:1.0",
        "InvalidFormat"
      )
{
}

OASIS::InvalidFormat::~InvalidFormat (void)
{
}

OASIS::InvalidFormat::InvalidFormat (const ::OASIS::InvalidFormat &_tao_excp)
  : ::CORBA::UserException (
        _tao_excp._rep_id (),
        _tao_excp._name ()
      )
{
}

OASIS::InvalidFormat&
OASIS::InvalidFormat::operator= (const ::OASIS::InvalidFormat &_tao_excp)
{
  this->::CORBA::UserException::operator= (_tao_excp);
  return *this;
}

OASIS::InvalidFormat *
OASIS::InvalidFormat::_downcast ( ::CORBA::Exception *_tao_excp)
{
  return dynamic_cast<InvalidFormat *> (_tao_excp);
}

const OASIS::InvalidFormat *
OASIS::InvalidFormat::_downcast ( ::CORBA::Exception const *_tao_excp)
{
  return dynamic_cast<const InvalidFormat *> (_tao_excp);
}

::CORBA::Exception *OASIS::InvalidFormat::_alloc (void)
{
  ::CORBA::Exception *retval = 0;
  ACE_NEW_RETURN (retval, ::OASIS::InvalidFormat, 0);
  return retval;
}

::CORBA::Exception *
OASIS::InvalidFormat::_tao_duplicate (void) const
{
  ::CORBA::Exception *result = 0;
  ACE_NEW_RETURN (
      result,
      ::OASIS::InvalidFormat (*this),
      0
    );
  return result;
}

void OASIS::InvalidFormat::_raise (void) const
{
  throw *this;
}

void OASIS::InvalidFormat::_tao_encode (TAO_OutputCDR &cdr) const
{
  if (!(cdr << *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

void OASIS::InvalidFormat::_tao_decode (TAO_InputCDR &cdr)
{
  if (!(cdr >> *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}



// TAO_IDL - Generated from
// .\be\be_visitor_exception\exception_cs.cpp:101

OASIS::NilUUID::NilUUID (void)
  : ::CORBA::UserException (
        "IDL:OASIS/NilUUID:1.0",
        "NilUUID"
      )
{
}

OASIS::NilUUID::~NilUUID (void)
{
}

OASIS::NilUUID::NilUUID (const ::OASIS::NilUUID &_tao_excp)
  : ::CORBA::UserException (
        _tao_excp._rep_id (),
        _tao_excp._name ()
      )
{
}

OASIS::NilUUID&
OASIS::NilUUID::operator= (const ::OASIS::NilUUID &_tao_excp)
{
  this->::CORBA::UserException::operator= (_tao_excp);
  return *this;
}

OASIS::NilUUID *
OASIS::NilUUID::_downcast ( ::CORBA::Exception *_tao_excp)
{
  return dynamic_cast<NilUUID *> (_tao_excp);
}

const OASIS::NilUUID *
OASIS::NilUUID::_downcast ( ::CORBA::Exception const *_tao_excp)
{
  return dynamic_cast<const NilUUID *> (_tao_excp);
}

::CORBA::Exception *OASIS::NilUUID::_alloc (void)
{
  ::CORBA::Exception *retval = 0;
  ACE_NEW_RETURN (retval, ::OASIS::NilUUID, 0);
  return retval;
}

::CORBA::Exception *
OASIS::NilUUID::_tao_duplicate (void) const
{
  ::CORBA::Exception *result = 0;
  ACE_NEW_RETURN (
      result,
      ::OASIS::NilUUID (*this),
      0
    );
  return result;
}

void OASIS::NilUUID::_raise (void) const
{
  throw *this;
}

void OASIS::NilUUID::_tao_encode (TAO_OutputCDR &cdr) const
{
  if (!(cdr << *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

void OASIS::NilUUID::_tao_decode (TAO_InputCDR &cdr)
{
  if (!(cdr >> *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}



// TAO_IDL - Generated from
// .\be\be_visitor_exception\exception_cs.cpp:101

OASIS::NotFound::NotFound (void)
  : ::CORBA::UserException (
        "IDL:OASIS/NotFound:1.0",
        "NotFound"
      )
{
}

OASIS::NotFound::~NotFound (void)
{
}

OASIS::NotFound::NotFound (const ::OASIS::NotFound &_tao_excp)
  : ::CORBA::UserException (
        _tao_excp._rep_id (),
        _tao_excp._name ()
      )
{
}

OASIS::NotFound&
OASIS::NotFound::operator= (const ::OASIS::NotFound &_tao_excp)
{
  this->::CORBA::UserException::operator= (_tao_excp);
  return *this;
}

OASIS::NotFound *
OASIS::NotFound::_downcast ( ::CORBA::Exception *_tao_excp)
{
  return dynamic_cast<NotFound *> (_tao_excp);
}

const OASIS::NotFound *
OASIS::NotFound::_downcast ( ::CORBA::Exception const *_tao_excp)
{
  return dynamic_cast<const NotFound *> (_tao_excp);
}

::CORBA::Exception *OASIS::NotFound::_alloc (void)
{
  ::CORBA::Exception *retval = 0;
  ACE_NEW_RETURN (retval, ::OASIS::NotFound, 0);
  return retval;
}

::CORBA::Exception *
OASIS::NotFound::_tao_duplicate (void) const
{
  ::CORBA::Exception *result = 0;
  ACE_NEW_RETURN (
      result,
      ::OASIS::NotFound (*this),
      0
    );
  return result;
}

void OASIS::NotFound::_raise (void) const
{
  throw *this;
}

void OASIS::NotFound::_tao_encode (TAO_OutputCDR &cdr) const
{
  if (!(cdr << *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

void OASIS::NotFound::_tao_decode (TAO_InputCDR &cdr)
{
  if (!(cdr >> *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}



// TAO_IDL - Generated from
// .\be\be_visitor_sequence\sequence_cs.cpp:73

#if !defined (_OASIS_CHARSTREAM_CS_)
#define _OASIS_CHARSTREAM_CS_

OASIS::CharStream::CharStream (void)
{}

OASIS::CharStream::CharStream (
    ::CORBA::ULong max)
  : ::TAO::unbounded_value_sequence<
        ::CORBA::Char
      > (max)
{}

OASIS::CharStream::CharStream (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    ::CORBA::Char * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::unbounded_value_sequence<
        ::CORBA::Char
      >
    (max, length, buffer, release)
{}

OASIS::CharStream::CharStream (
    const CharStream &seq)
  : ::TAO::unbounded_value_sequence<
        ::CORBA::Char
      > (seq)
{}

OASIS::CharStream::~CharStream (void)
{}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// .\be\be_visitor_sequence\sequence_cs.cpp:73

#if !defined (_OASIS_BINARYSTREAM_CS_)
#define _OASIS_BINARYSTREAM_CS_

OASIS::BinaryStream::BinaryStream (void)
{}

OASIS::BinaryStream::BinaryStream (
    ::CORBA::ULong max)
  : ::TAO::unbounded_value_sequence<
        ::CORBA::Octet
      > (max)
{}

OASIS::BinaryStream::BinaryStream (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    ::CORBA::Octet * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::unbounded_value_sequence<
        ::CORBA::Octet
      >
    (max, length, buffer, release)
{}

OASIS::BinaryStream::BinaryStream (
    const BinaryStream &seq)
  : ::TAO::unbounded_value_sequence<
        ::CORBA::Octet
      > (seq)
{}

OASIS::BinaryStream::~BinaryStream (void)
{}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// .\be\be_visitor_exception\cdr_op_cs.cpp:51
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const OASIS::DuplicateRegistration &_tao_aggregate
  )
{
  // Marshal the repository ID.
  return (strm << _tao_aggregate._rep_id ());
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &,
    OASIS::DuplicateRegistration&
  )
{
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// .\be\be_visitor_exception\cdr_op_cs.cpp:51
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const OASIS::RegistrationFailed &_tao_aggregate
  )
{
  // Marshal the repository ID.
  return (strm << _tao_aggregate._rep_id ());
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &,
    OASIS::RegistrationFailed&
  )
{
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// .\be\be_visitor_exception\cdr_op_cs.cpp:51
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const OASIS::InvalidData &_tao_aggregate
  )
{
  // Marshal the repository ID.
  return (strm << _tao_aggregate._rep_id ());
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &,
    OASIS::InvalidData&
  )
{
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// .\be\be_visitor_exception\cdr_op_cs.cpp:51
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const OASIS::InvalidFormat &_tao_aggregate
  )
{
  // Marshal the repository ID.
  return (strm << _tao_aggregate._rep_id ());
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &,
    OASIS::InvalidFormat&
  )
{
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// .\be\be_visitor_exception\cdr_op_cs.cpp:51
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const OASIS::NilUUID &_tao_aggregate
  )
{
  // Marshal the repository ID.
  return (strm << _tao_aggregate._rep_id ());
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &,
    OASIS::NilUUID&
  )
{
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// .\be\be_visitor_exception\cdr_op_cs.cpp:51
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const OASIS::NotFound &_tao_aggregate
  )
{
  // Marshal the repository ID.
  return (strm << _tao_aggregate._rep_id ());
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &,
    OASIS::NotFound&
  )
{
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// .\be\be_visitor_sequence\cdr_op_cs.cpp:96
#if !defined _TAO_CDR_OP_OASIS_CharStream_CPP_
#define _TAO_CDR_OP_OASIS_CharStream_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const OASIS::CharStream &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    OASIS::CharStream &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_OASIS_CharStream_CPP_ */

// TAO_IDL - Generated from
// .\be\be_visitor_sequence\cdr_op_cs.cpp:96
#if !defined _TAO_CDR_OP_OASIS_BinaryStream_CPP_
#define _TAO_CDR_OP_OASIS_BinaryStream_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const OASIS::BinaryStream &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    OASIS::BinaryStream &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_OASIS_BinaryStream_CPP_ */

// TAO_IDL - Generated from
// .\be\be_visitor_structure\cdr_op_cs.cpp:52

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const OASIS::TimeStamp &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.sec) &&
    (strm << _tao_aggregate.usec);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    OASIS::TimeStamp &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.sec) &&
    (strm >> _tao_aggregate.usec);
}

TAO_END_VERSIONED_NAMESPACE_DECL



